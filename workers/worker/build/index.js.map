{"debug_id":"d7a15213-6a7c-5614-b580-53064908cae2","mappings":";;AAwBA,IAAO,cAAQ;AAAA,EAIb,MAAM,MACJ,KACA,KACA,KACmB;AAGnB,UAAM,IAAI,MAAM,KAAK;AAAA,MACnB,KAAK,IAAI;AAAA,MACT,QAAQ,IAAI;AAAA,MACZ,SAAS,OAAO,YAAY,IAAI,OAAO;AAAA,IACzC,CAAC;AACD,WAAO,IAAI,SAAS,2BAA2B;AAAA,EACjD;AAAA,EAGA,MAAM,MAAM,OAA4B,KAAyB;AAG/D,aAAS,WAAW,MAAM,UAAU;AAElC,cAAQ;AAAA,QACN,WAAW,QAAQ,iBAAiB,KAAK,UAAU,QAAQ,IAAI;AAAA,MACjE;AAAA,IACF;AAAA,EACF;AACF;","names":[],"sourceRoot":"build","sources":["../src/index.ts"],"sourcesContent":["/**\n * Welcome to Cloudflare Workers!\n *\n * This is a template for a Queue consumer: a Worker that can consume from a\n * Queue: https://developers.cloudflare.com/queues/get-started/\n *\n * - Run `npm run dev` in your terminal to start a development server\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\n * - Run `npm run deploy` to publish your worker\n *\n * Learn more at https://developers.cloudflare.com/workers/\n */\n\ntype QueueMessage = {\n  url: string;\n  method: string;\n  headers: Record<string, string>;\n};\n\nexport interface Env {\n  // Example binding to a Queue. Learn more at https://developers.cloudflare.com/queues/javascript-apis/\n  QUEUE: Queue<QueueMessage>;\n}\n\nexport default {\n  // Our fetch handler is invoked on a HTTP request: we can send a message to a queue\n  // during (or after) a request.\n  // https://developers.cloudflare.com/queues/platform/javascript-apis/#producer\n  async fetch(\n    req: Request,\n    env: Env,\n    ctx: ExecutionContext\n  ): Promise<Response> {\n    // To send a message on a queue, we need to create the queue first\n    // https://developers.cloudflare.com/queues/get-started/#3-create-a-queue\n    await env.QUEUE.send({\n      url: req.url,\n      method: req.method,\n      headers: Object.fromEntries(req.headers),\n    });\n    return new Response(\"Sent message to the queue\");\n  },\n  // The queue handler is invoked when a batch of messages is ready to be delivered\n  // https://developers.cloudflare.com/queues/platform/javascript-apis/#messagebatch\n  async queue(batch: MessageBatch<Error>, env: Env): Promise<void> {\n    // A queue consumer can make requests to other endpoints on the Internet,\n    // write to R2 object storage, query a D1 Database, and much more.\n    for (let message of batch.messages) {\n      // Process each message (we'll just log these)\n      console.log(\n        `message ${message.id} processed: ${JSON.stringify(message.body)}`\n      );\n    }\n  },\n};\n"],"version":3}